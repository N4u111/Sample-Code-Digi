generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Sa%40123@localhost:3306/user_service_db"
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  age       Int
  password  String     @default("")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  roles      UserRole[]
  authTokens AuthToken[]

  @@map("users")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  slug        String           @unique
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  users       UserRole[]
  permissions RolePermission[]
  groups      GroupRole[]

  @@map("roles")
}

model Permission {
  id         String           @id @default(uuid())
  name       String           @unique
  code       String           @unique
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  roles      RolePermission[]

  @@map("permissions")
}

model Group {
  id         String     @id @default(uuid())
  name       String     @unique
  slug       String     @unique
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  roles      GroupRole[]

  @@map("groups")
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now()) @map("assigned_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
  @@map("user_role")
}

model RolePermission {
  roleId       String
  permissionId String
  grantedAt    DateTime @default(now()) @map("granted_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId])
  @@map("role_permission")
}

model GroupRole {
  groupId    String
  roleId     String
  assignedAt DateTime @default(now()) @map("assigned_at")

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role  Role  @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([groupId, roleId])
  @@index([roleId])
  @@map("group_role")
}

model AuthToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  type      TokenType
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("auth_tokens")
}

enum TokenType {
  ACCESS
  REFRESH
}
